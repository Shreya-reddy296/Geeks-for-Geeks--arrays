LINEAR INSERTION SORT------

void insertionSort(int a[], int n)
{
      int key, i,j;
      for(int i=1;j<n;j++)
      {
          j=i-1;
          key=a[i];
          while(j>=0 && a[j]>key)
          {
              a[j+1]=a[j];
              j--;
          }
          a[j+1]=key;
       }


}
void printArray(int arr[], int n)
{
    int i;
    for (i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}
int main()
{
    int arr[] = { 12, 11, 13, 5, 6 };
    int n = sizeof(arr);
    insertionSort(arr, n);
    printArray(arr, n);
 
    return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
BINARY INSERTION SORT---------
void insertionSort(int a[], int n)
{
      int key, i,j;
      for(int i=1;j<n;j++)
      {
          j=i-1;
          key=a[i];
          loc=binarySearch(a, key, 0, n-1);
          while(j>=loc)
          {
              a[j+1]=a[j];
              j--;
          }
          a[j+1]=key;
}
int binarySearch(int a[], int key, int low, int high)
{
      if(high<=low)
          return (key>a[low])? (low+1):low;
      int mid = (low + high) / 2;
 
      if (item == a[mid])
        return mid + 1;
 
      if (item > a[mid])
        return binarySearch(a, item,
                            mid + 1, high);
      return binarySearch(a, item, low,
                        mid - 1);
}


void printArray(int arr[], int n)
{
    int i;
    for (i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}
int main()
{
    int arr[] = { 12, 11, 13, 5, 6 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    insertionSort(arr, n);
    printArray(arr, n);
}
 


























 
